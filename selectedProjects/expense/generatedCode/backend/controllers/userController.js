const bcrypt = require('bcrypt');const jwt = require('jsonwebtoken');const { User } = require('../models');const signup = async (req, res) => {try {const { name, email, password } = req.body;const hashedPassword = await bcrypt.hash(password, 10);const user = await User.create({ name, email, password: hashedPassword });res.status(201).json(user);} catch (error) {res.status(400).json({ error: 'Signup failed' });}};const login = async (req, res) => {try {const { email, password } = req.body;const user = await User.findOne({ where: { email } });if (!user || !(await bcrypt.compare(password, user.password))) {return res.status(401).json({ error: 'Invalid credentials' });}const token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET);res.json({ token });} catch (error) {res.status(400).json({ error: 'Login failed' });}};const getAllUsers = async (req, res) => {try {const users = await User.findAll();res.json(users);} catch (error) {res.status(400).json({ error: 'Failed to fetch users' });}};const updateUser = async (req, res) => {try {const { id } = req.params;const { name, role, status } = req.body;await User.update({ name, role, status }, { where: { id } });res.json({ message: 'User updated successfully' });} catch (error) {res.status(400).json({ error: 'Failed to update user' });}};module.exports = { signup, login, getAllUsers, updateUser };