```json
{
    "files": {
        "frontend/src/components/Dashboard.js": "import { useFetch } from '../hooks/useFetch';import { useAuth } from '../hooks/useAuth';import { Box, Typography, Grid, Card, CardContent, Skeleton, Stack } from '@mui/material';import { DataGrid } from '@mui/x-data-grid';import { PieChart, Pie, Cell, Tooltip } from 'recharts';import { useNavigate } from 'react-router-dom';const Dashboard = () => {const { user } = useAuth();const navigate = useNavigate();const token = localStorage.getItem('token');const { data: expenses, isLoading } = useFetch('http://localhost:3000/api/expenses', token);const recentExpenses = expenses?.slice(0, 5) || [];const metrics = { totalSubmitted: expenses?.length || 0, totalApproved: expenses?.filter((e) => e.status === 'Approved').length || 0, totalRejected: expenses?.filter((e) => e.status === 'Rejected').length || 0 };const chartData = [ { name: 'Approved', value: metrics.totalApproved }, { name: 'Rejected', value: metrics.totalRejected }, { name: 'Pending', value: metrics.totalSubmitted - metrics.totalApproved - metrics.totalRejected }];const colors = ['#4caf50', '#f44336', '#ff9800'];return (<Box sx={{ p: 3 }}> <Typography variant=\"h4\" mb={2}>Dashboard</Typography> <Grid container spacing={3}> <Grid item xs={12} md={4}> <Card> <CardContent> {isLoading ? <Skeleton variant=\"rectangular\" height={50} /> : <Typography variant=\"h6\">Total Submitted: {metrics.totalSubmitted}</Typography>} </CardContent> </Card> </Grid> <Grid item xs={12} md={4}> <Card> <CardContent> {isLoading ? <Skeleton variant=\"rectangular\" height={50} /> : <Typography variant=\"h6\">Total Approved: {metrics.totalApproved}</Typography>} </CardContent> </Card> </Grid> <Grid item xs={12} md={4}> <Card> <CardContent> {isLoading ? <Skeleton variant=\"rectangular\" height={50} /> : <Typography variant=\"h6\">Total Rejected: {metrics.totalRejected}</Typography>} </CardContent> </Card> </Grid> </Grid> <Box sx={{ mt: 5 }}> {isLoading ? <Skeleton variant=\"rectangular\" height={200} /> : <PieChart width={400} height={400}> <Pie data={chartData} dataKey=\"value\" outerRadius={150}> {chartData.map((entry, index) => (<Cell key={`cell-${index}`} fill={colors[index]} />))} </Pie> <Tooltip /> </PieChart>} </Box> <Box sx={{ mt: 5 }}> <Typography variant=\"h6\" mb={2}>Recent Expenses</Typography> {isLoading ? (<Stack spacing={2}> <Skeleton variant=\"rectangular\" height={50} /> <Skeleton variant=\"rectangular\" height={50} /> <Skeleton variant=\"rectangular\" height={50} /> </Stack>) : (<DataGrid rows={recentExpenses.map((e) => ({ id: e.id, date: new Date(e.date).toLocaleDateString(), amount: e.amount, status: e.status }))} columns={[{ field: 'date', headerName: 'Date', flex: 1 }, { field: 'amount', headerName: 'Amount', flex: 1 }, { field: 'status', headerName: 'Status', flex: 1 }]} autoHeight pageSize={5} onRowClick={(params) => navigate(`/expense/${params.id}`)} />)} </Box> </Box>);};export default Dashboard;",
        "frontend/src/components/SubmitExpense.js": "import { useState } from 'react';import { Box, Typography, Snackbar, Alert } from '@mui/material';import Form from '@rjsf/mui';import { submitExpense } from '../services/expenseService';import validator from '@rjsf/validator-ajv8';const SubmitExpense = () => {const [success, setSuccess] = useState(false);const [error, setError] = useState(false);const token = localStorage.getItem('token');const schema = { type: 'object', properties: { title: { type: 'string', title: 'Expense Title' }, amount: { type: 'number', title: 'Amount' }, category: { type: 'string', title: 'Category', enum: ['Food', 'Travel', 'Miscellaneous'] }, date: { type: 'string', title: 'Date', format: 'date' }, receipt: { type: 'string', title: 'Receipt (optional)' } }, required: ['title', 'amount', 'category', 'date'] };const uiSchema = { receipt: { 'ui:widget': 'file' } };const handleSubmit = async ({ formData }) => {try {await submitExpense(formData, token);setSuccess(true);} catch {setError(true);}};return (<Box sx={{ p: 3 }}> <Typography variant=\"h4\" mb={2}>Submit Expense</Typography> <Form schema={schema} uiSchema={uiSchema} validator={validator} onSubmit={handleSubmit} /> <Snackbar open={success} autoHideDuration={3000} onClose={() => setSuccess(false)}> <Alert severity=\"success\">Expense submitted successfully!</Alert> </Snackbar> <Snackbar open={error} autoHideDuration={3000} onClose={() => setError(false)}> <Alert severity=\"error\">Failed to submit expense!</Alert> </Snackbar> </Box>);};export default SubmitExpense;",
        "frontend/src/components/AdminUserManagement.js": "import { useNavigate } from 'react-router-dom';import { useFetch } from '../hooks/useFetch';import { Box, Typography, Button, Dialog, DialogContent, DialogActions, TextField, Snackbar, Alert, Stack } from '@mui/material';import { DataGrid } from '@mui/x-data-grid';import { useState } from 'react';import { getAllUsers } from '../services/userService';const AdminUserManagement = () => {const [isModalOpen, setIsModalOpen] = useState(false);const [name, setName] = useState('');const [role, setRole] = useState('user');const [status, setStatus] = useState(true);const [success, setSuccess] = useState(false);const [error, setError] = useState(false);const token = localStorage.getItem('token');const { data: users, isLoading } = useFetch('http://localhost:3000/api/users', token);const navigate = useNavigate();const handleAddUser = async () => {try {const newUser = { name, role, status };await getAllUsers(token);setSuccess(true);setIsModalOpen(false);} catch {setError(true);}};return (<Box sx={{ p: 3 }}> <Typography variant=\"h4\" mb={2}>User Management</Typography> <Button variant=\"contained\" onClick={() => setIsModalOpen(true)}>Add User</Button> <Box sx={{ mt: 3 }}> {isLoading ? (<Stack spacing={2}> <Skeleton variant=\"rectangular\" height={50} /> <Skeleton variant=\"rectangular\" height={50} /> <Skeleton variant=\"rectangular\" height={50} /> </Stack>) : (<DataGrid rows={users.map((u) => ({ id: u.id, username: u.name, role: u.role, status: u.status ? 'Active' : 'Inactive' }))} columns={[{ field: 'username', headerName: 'Username', flex: 1 }, { field: 'role', headerName: 'Role', flex: 1 }, { field: 'status', headerName: 'Status', flex: 1 }]} autoHeight pageSize={5} onRowClick={(params) => navigate(`/user/${params.id}`)} />)} </Box> <Dialog open={isModalOpen} onClose={() => setIsModalOpen(false)}> <DialogContent> <TextField label=\"Name\" fullWidth value={name} onChange={(e) => setName(e.target.value)} sx={{ mb: 2 }} /> <TextField label=\"Role\" fullWidth value={role} onChange={(e) => setRole(e.target.value)} sx={{ mb: 2 }} /> <TextField label=\"Status\" fullWidth value={status} onChange={(e) => setStatus(e.target.value)} sx={{ mb: 2 }} /> </DialogContent> <DialogActions> <Button onClick={() => setIsModalOpen(false)}>Cancel</Button> <Button onClick={handleAddUser} variant=\"contained\">Add</Button> </DialogActions> </Dialog> <Snackbar open={success} autoHideDuration={3000} onClose={() => setSuccess(false)}> <Alert severity=\"success\">User added successfully!</Alert> </Snackbar> <Snackbar open={error} autoHideDuration={3000} onClose={() => setError(false)}> <Alert severity=\"error\">Failed to add user!</Alert> </Snackbar> </Box>);};export default AdminUserManagement;"
    },
    "commands": ["cd frontend && npm install @rjsf/core @rjsf/utils @rjsf/validator-ajv8 @rjsf/mui","cd frontend && npm install @mui/x-data-grid","cd frontend && npm install recharts"]
}
```