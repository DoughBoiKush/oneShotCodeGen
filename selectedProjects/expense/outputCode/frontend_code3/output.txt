{
    "files": {
        "frontend/src/pages/LoginPage.js": "import Login from '../components/Login';const LoginPage = () => <Login />;export default LoginPage;",
        "frontend/src/pages/DashboardPage.js": "import Dashboard from '../components/Dashboard';const DashboardPage = () => <Dashboard />;export default DashboardPage;",
        "frontend/src/pages/SubmitExpensePage.js": "import SubmitExpense from '../components/SubmitExpense';const SubmitExpensePage = () => <SubmitExpense />;export default SubmitExpensePage;",
        "frontend/src/pages/AdminUserManagementPage.js": "import AdminUserManagement from '../components/AdminUserManagement';const AdminUserManagementPage = () => <AdminUserManagement />;export default AdminUserManagementPage;",
        "frontend/src/pages/ProfilePage.js": "import { Box, Typography, Snackbar, Alert } from '@mui/material';import Form from '@rjsf/mui';import validator from '@rjsf/validator-ajv8';import { useState } from 'react';const ProfilePage = () => {const token = localStorage.getItem('token');const schema = {type: 'object',properties: {name: {type: 'string',title: 'Name'},department: {type: 'string',title: 'Department'},role: {type: 'string',title: 'Role'}},required: ['name', 'department']};const [success, setSuccess] = useState(false);const [error, setError] = useState(false);const handleSubmit = async ({ formData }) => {try {await fetch('http://localhost:3000/api/users', {method: 'PUT',headers: {'Authorization': `Bearer ${token}`,'Content-Type': 'application/json'},body: JSON.stringify(formData)});setSuccess(true);} catch {setError(true);}};return (<Box sx={{ p: 3 }}> <Typography variant=\"h4\" mb={2}>Edit Profile</Typography> <Form schema={schema} validator={validator} onSubmit={handleSubmit} /> <Snackbar open={success} autoHideDuration={3000} onClose={() => setSuccess(false)}> <Alert severity=\"success\">Profile updated successfully!</Alert> </Snackbar> <Snackbar open={error} autoHideDuration={3000} onClose={() => setError(false)}> <Alert severity=\"error\">Failed to update profile!</Alert> </Snackbar> </Box>);};export default ProfilePage;",
        "frontend/src/pages/ErrorPage.js": "import { Box, Typography, Button } from '@mui/material';import { useNavigate } from 'react-router-dom';const ErrorPage = () => {const navigate = useNavigate();return (<Box sx={{ textAlign: 'center', mt: 5 }}> <Typography variant=\"h4\" gutterBottom>Error</Typography> <Typography variant=\"body1\" gutterBottom>Page not found or unauthorized access</Typography> <Button variant=\"contained\" onClick={() => navigate('/dashboard')}>Go Back to Dashboard</Button> </Box>);};export default ErrorPage;",
        "frontend/src/App.js": "import { Routes, Route } from 'react-router-dom';import { useAuth } from './hooks/useAuth';import Header from './components/Header';import LoginPage from './pages/LoginPage';import DashboardPage from './pages/DashboardPage';import SubmitExpensePage from './pages/SubmitExpensePage';import AdminUserManagementPage from './pages/AdminUserManagementPage';import ProfilePage from './pages/ProfilePage';import ErrorPage from './pages/ErrorPage';const App = () => {const { user } = useAuth();const ProtectedRoute = ({ children, roles }) => {if (!user) return <LoginPage />;if (roles && !roles.includes(user.role)) return <ErrorPage />;return children;};return (<div> <Header /> <Routes> <Route path=\"/\" element={<LoginPage />} /> <Route path=\"/dashboard\" element={<ProtectedRoute><DashboardPage /></ProtectedRoute>} /> <Route path=\"/submit-expense\" element={<ProtectedRoute><SubmitExpensePage /></ProtectedRoute>} /> <Route path=\"/admin\" element={<ProtectedRoute roles={['admin']}><AdminUserManagementPage /></ProtectedRoute>} /> <Route path=\"/profile\" element={<ProtectedRoute><ProfilePage /></ProtectedRoute>} /> <Route path=\"*\" element={<ErrorPage />} /> </Routes> </div>);};export default App;",
        "frontend/src/index.js": "import React from 'react';import ReactDOM from 'react-dom';import { BrowserRouter } from 'react-router-dom';import { QueryClient, QueryClientProvider } from 'react-query';import { AuthProvider } from './context/AuthContext';import App from './App';import './index.css';const queryClient = new QueryClient();ReactDOM.render(<React.StrictMode> <QueryClientProvider client={queryClient}> <AuthProvider> <BrowserRouter> <App /> </BrowserRouter> </AuthProvider> </QueryClientProvider> </React.StrictMode>, document.getElementById('root'));",
        "frontend/src/theme.js": "import { createTheme } from '@mui/material/styles';const theme = createTheme({palette: {primary: {main: '#1976d2'},secondary: {main: '#9c27b0'}},typography: {fontFamily: 'Roboto, sans-serif'}});export default theme;"
    },
    "commands": ["cd frontend && npm install react-query","cd frontend && npm install @mui/icons-material","cd frontend && npm install @rjsf/core @rjsf/utils @rjsf/validator-ajv8 @rjsf/mui"]
}