{
"files":{
"backend/.env":"PORT=3000\nDB_PATH=./database.sqlite\nJWT_SECRET=rocketbuild-secret-key",
"backend/config/database.js":"const { Sequelize } = require('sequelize');\nconst path = require('path');\nconst dbPath = path.resolve(process.env.DB_PATH);\nconst sequelize = new Sequelize({dialect:'sqlite',storage:dbPath,logging:false});\nmodule.exports = sequelize;",
"backend/models/User.js":"const { DataTypes } = require('sequelize');\nconst sequelize = require('../config/database');\nconst User = sequelize.define('User', {\nid: {type: DataTypes.INTEGER,primaryKey: true,autoIncrement: true},\nemail: {type: DataTypes.STRING,unique: true,allowNull: false},\npassword: {type: DataTypes.STRING,allowNull: false},\nrole: {type: DataTypes.ENUM('user', 'admin'),defaultValue: 'user'},\nname: DataTypes.STRING\n});\nmodule.exports = User;",
"backend/models/Project.js":"const { DataTypes } = require('sequelize');\nconst sequelize = require('../config/database');\nconst Project = sequelize.define('Project', {\nid: {type: DataTypes.INTEGER,primaryKey: true,autoIncrement: true},\ntitle: {type: DataTypes.STRING,allowNull: false},\ndescription: DataTypes.TEXT,\nstatus: {type: DataTypes.ENUM('in_progress', 'completed'),defaultValue: 'in_progress'}\n});\nmodule.exports = Project;",
"backend/models/Task.js":"const { DataTypes } = require('sequelize');\nconst sequelize = require('../config/database');\nconst Task = sequelize.define('Task', {\nid: {type: DataTypes.INTEGER,primaryKey: true,autoIncrement: true},\ntitle: {type: DataTypes.STRING,allowNull: false},\ndescription: DataTypes.TEXT,\nstatus: {type: DataTypes.ENUM('pending', 'in_progress', 'completed'),defaultValue: 'pending'}\n});\nmodule.exports = Task;",
"backend/models/index.js":"const sequelize = require('../config/database');\nconst User = require('./User');\nconst Project = require('./Project');\nconst Task = require('./Task');\nUser.hasMany(Project);\nProject.belongsTo(User);\nProject.hasMany(Task);\nTask.belongsTo(Project);\nmodule.exports = {sequelize,User,Project,Task};",
"backend/controllers/authController.js":"const jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\nconst { User } = require('../models');\nconst login = async (req, res) => {\ntry {\nconst { email, password } = req.body;\nconst user = await User.findOne({ where: { email } });\nif (!user || !bcrypt.compareSync(password, user.password)) return res.status(401).json({ message: 'Invalid credentials' });\nconst token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET);\nres.json({ token, user: { id: user.id, email: user.email, role: user.role, name: user.name } });\n} catch (error) {res.status(500).json({ message: error.message });}\n};\nconst register = async (req, res) => {\ntry {\nconst { email, password, name } = req.body;\nconst hashedPassword = bcrypt.hashSync(password, 8);\nconst user = await User.create({ email, password: hashedPassword, name });\nconst token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET);\nres.status(201).json({ token, user: { id: user.id, email: user.email, role: user.role, name: user.name } });\n} catch (error) {res.status(500).json({ message: error.message });}\n};\nmodule.exports = { login, register };",
"backend/controllers/projectController.js":"const { Project, Task } = require('../models');\nconst create = async (req, res) => {\ntry {\nconst project = await Project.create({ ...req.body, UserId: req.user.id });\nres.status(201).json(project);\n} catch (error) {res.status(500).json({ message: error.message });}\n};\nconst getAll = async (req, res) => {\ntry {\nconst projects = await Project.findAll({ where: { UserId: req.user.id }, include: [{ model: Task }] });\nres.json(projects);\n} catch (error) {res.status(500).json({ message: error.message });}\n};\nconst getById = async (req, res) => {\ntry {\nconst project = await Project.findOne({ where: { id: req.params.id, UserId: req.user.id }, include: [{ model: Task }] });\nif (!project) return res.status(404).json({ message: 'Project not found' });\nres.json(project);\n} catch (error) {res.status(500).json({ message: error.message });}\n};\nmodule.exports = { create, getAll, getById };",
"backend/controllers/taskController.js":"const { Task } = require('../models');\nconst create = async (req, res) => {\ntry {\nconst task = await Task.create(req.body);\nres.status(201).json(task);\n} catch (error) {res.status(500).json({ message: error.message });}\n};\nconst update = async (req, res) => {\ntry {\nconst [updated] = await Task.update(req.body, { where: { id: req.params.id } });\nif (!updated) return res.status(404).json({ message: 'Task not found' });\nconst task = await Task.findByPk(req.params.id);\nres.json(task);\n} catch (error) {res.status(500).json({ message: error.message });}\n};\nmodule.exports = { create, update };",
"backend/middleware/auth.js":"const jwt = require('jsonwebtoken');\nconst authenticate = (req, res, next) => {\ntry {\nconst token = req.headers.authorization?.split(' ')[1];\nif (!token) return res.status(401).json({ message: 'Authentication required' });\nconst decoded = jwt.verify(token, process.env.JWT_SECRET);\nreq.user = decoded;\nnext();\n} catch (error) {res.status(401).json({ message: 'Invalid token' });}\n};\nconst isAdmin = (req, res, next) => {\nif (req.user.role !== 'admin') return res.status(403).json({ message: 'Admin access required' });\nnext();\n};\nmodule.exports = { authenticate, isAdmin };",
"backend/routes/auth.js":"const router = require('express').Router();\nconst { login, register } = require('../controllers/authController');\nrouter.post('/login', login);\nrouter.post('/register', register);\nmodule.exports = router;",
"backend/routes/projects.js":"const router = require('express').Router();\nconst { authenticate } = require('../middleware/auth');\nconst { create, getAll, getById } = require('../controllers/projectController');\nrouter.use(authenticate);\nrouter.post('/', create);\nrouter.get('/', getAll);\nrouter.get('/:id', getById);\nmodule.exports = router;",
"backend/routes/tasks.js":"const router = require('express').Router();\nconst { authenticate } = require('../middleware/auth');\nconst { create, update } = require('../controllers/taskController');\nrouter.use(authenticate);\nrouter.post('/', create);\nrouter.put('/:id', update);\nmodule.exports = router;",
"backend/seeders/index.js":"const bcrypt = require('bcryptjs');\nconst { User, Project, Task } = require('../models');\nconst seed = async () => {\ntry {\nconst adminUser = await User.create({\nemail: 'user@example.com',\npassword: bcrypt.hashSync('test123', 8),\nname: 'Admin User',\nrole: 'admin'\n});\nconst project = await Project.create({\ntitle: 'Sample Rocket Project',\ndescription: 'A test rocket building project',\nUserId: adminUser.id\n});\nawait Task.create({\ntitle: 'Design Phase',\ndescription: 'Initial rocket design',\nProjectId: project.id\n});\n} catch (error) {console.error('Seeding error:', error);}\n};\nmodule.exports = seed;",
"backend/server.js":"require('dotenv').config();\nconst express = require('express');\nconst cors = require('cors');\nconst { sequelize } = require('./models');\nconst seed = require('./seeders');\nconst app = express();\napp.use(cors());\napp.use(express.json());\napp.use('/api/auth', require('./routes/auth'));\napp.use('/api/projects', require('./routes/projects'));\napp.use('/api/tasks', require('./routes/tasks'));\nsequelize.sync().then(async () => {\nconst count = await sequelize.models.User.count();\nif (count === 0) await seed();\napp.listen(process.env.PORT, () => console.log(`Server running on port ${process.env.PORT}`));\n});"
},
"commands":["mkdir backend","cd backend && npm init -y","cd backend && npm install express sequelize sqlite3 bcryptjs jsonwebtoken cors dotenv"]
}