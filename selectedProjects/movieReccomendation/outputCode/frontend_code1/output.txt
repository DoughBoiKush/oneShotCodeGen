{
"files":{
"frontend/src/services/api.js":"import axios from 'axios';\nconst API_URL = 'http://localhost:3000/api';\nconst api = axios.create({baseURL: API_URL});\napi.interceptors.request.use((config) => {const token = localStorage.getItem('token');if (token) {config.headers.Authorization = `Bearer ${token}`;}return config;});\nexport const login = async (credentials) => {const response = await api.post('/auth/login', credentials);return response.data;};\nexport const register = async (userData) => {const response = await api.post('/auth/register', userData);return response.data;};\nexport const getRecommendations = async () => {const response = await api.get('/recommendations');return response.data;};\nexport const createRecommendation = async (data) => {const response = await api.post('/recommendations', data);return response.data;};\nexport const getFriends = async () => {const response = await api.get('/friendships/friends');return response.data;};\nexport const sendFriendRequest = async (friendId) => {const response = await api.post(`/friendships/request/${friendId}`);return response.data;};\nexport const acceptFriendRequest = async (userId) => {const response = await api.put(`/friendships/accept/${userId}`);return response.data;};",
"frontend/src/context/AuthContext.js":"import { createContext, useState, useEffect } from 'react';\nexport const AuthContext = createContext();\nexport const AuthProvider = ({ children }) => {const [user, setUser] = useState(null);const [loading, setLoading] = useState(true);useEffect(() => {const userData = localStorage.getItem('user');if (userData) {setUser(JSON.parse(userData));}setLoading(false);}, []);const login = (userData) => {localStorage.setItem('user', JSON.stringify(userData));localStorage.setItem('token', userData.token);setUser(userData);};const logout = () => {localStorage.removeItem('user');localStorage.removeItem('token');setUser(null);};const value = {user,login,logout,loading};return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;};",
"frontend/src/hooks/useAuth.js":"import { useContext } from 'react';\nimport { AuthContext } from '../context/AuthContext';\nexport const useAuth = () => {const context = useContext(AuthContext);if (!context) {throw new Error('useAuth must be used within an AuthProvider');}return context;};",
"frontend/src/components/auth/LoginForm.js":"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Box, Alert } from '@mui/material';\nimport Form from '@rjsf/mui';\nimport validator from '@rjsf/validator-ajv8';\nimport { useAuth } from '../../hooks/useAuth';\nimport * as api from '../../services/api';\nexport const LoginForm = () => {const navigate = useNavigate();const { login } = useAuth();const [error, setError] = useState('');const schema = {type: 'object',required: ['email', 'password'],properties: {email: {type: 'string',format: 'email',title: 'Email'},password: {type: 'string',title: 'Password'}}};const uiSchema = {password: {'ui:widget': 'password'}};const handleSubmit = async ({ formData }) => {try {const data = await api.login(formData);login(data);navigate('/');} catch (err) {setError(err.response?.data?.error || 'Login failed');}};return (<Box sx={{ maxWidth: 400, mx: 'auto', p: 2 }}>{error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}<Form schema={schema} uiSchema={uiSchema} validator={validator} onSubmit={handleSubmit}/>}</Box>);};",
"frontend/src/components/auth/SignupForm.js":"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Box, Alert } from '@mui/material';\nimport Form from '@rjsf/mui';\nimport validator from '@rjsf/validator-ajv8';\nimport { useAuth } from '../../hooks/useAuth';\nimport * as api from '../../services/api';\nexport const SignupForm = () => {const navigate = useNavigate();const { login } = useAuth();const [error, setError] = useState('');const schema = {type: 'object',required: ['email', 'password', 'name'],properties: {email: {type: 'string',format: 'email',title: 'Email'},password: {type: 'string',title: 'Password'},name: {type: 'string',title: 'Name'}}};const uiSchema = {password: {'ui:widget': 'password'}};const handleSubmit = async ({ formData }) => {try {const data = await api.register(formData);login(data);navigate('/');} catch (err) {setError(err.response?.data?.error || 'Registration failed');}};return (<Box sx={{ maxWidth: 400, mx: 'auto', p: 2 }}>{error && <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>}<Form schema={schema} uiSchema={uiSchema} validator={validator} onSubmit={handleSubmit}/>}</Box>);};",
"frontend/src/components/layout/Header.js":"import { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AppBar, Toolbar, Typography, IconButton, Menu, MenuItem, Avatar, Box } from '@mui/material';\nimport { useAuth } from '../../hooks/useAuth';\nexport const Header = ({ title, menuItems = [] }) => {const navigate = useNavigate();const { user, logout } = useAuth();const [anchorEl, setAnchorEl] = useState(null);const handleMenu = (event) => setAnchorEl(event.currentTarget);const handleClose = () => setAnchorEl(null);const handleLogout = () => {logout();navigate('/login');};const handleMenuClick = (path) => {handleClose();navigate(path);};return (<AppBar position=\"static\"><Toolbar><Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>{title}</Typography>{user && (<><Box sx={{ display: 'flex', alignItems: 'center' }}>{menuItems.map((item) => (<MenuItem key={item.path} onClick={() => handleMenuClick(item.path)}>{item.label}</MenuItem>))}</Box><IconButton onClick={handleMenu} color=\"inherit\"><Avatar sx={{ width: 32, height: 32 }}>{user.name[0]}</Avatar></IconButton><Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleClose}><MenuItem onClick={() => handleMenuClick('/profile')}>Profile</MenuItem><MenuItem onClick={handleLogout}>Logout</MenuItem></Menu></>)}</Toolbar></AppBar>);};"
},
"commands":[
"npx create-react-app frontend --template typescript",
"cd frontend && npm install @mui/material @emotion/react @emotion/styled @mui/icons-material",
"cd frontend && npm install @rjsf/core @rjsf/utils @rjsf/validator-ajv8 @rjsf/mui",
"cd frontend && npm install axios react-router-dom@6.26.2 react-query recharts"
]
}