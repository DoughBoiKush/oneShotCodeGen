{
"files":{
"frontend/src/components/common/LoadingState.js":"import { Stack, Skeleton } from '@mui/material';\nexport const LoadingState = () => (<Stack spacing={1}><Skeleton variant=\"rectangular\" height={60}/><Skeleton variant=\"rectangular\" height={400}/></Stack>);",
"frontend/src/components/recommendations/RecommendationsList.js":"import { DataGrid } from '@mui/x-data-grid';\nimport { Box, Button } from '@mui/material';\nimport { useState } from 'react';\nimport { AddRecommendationModal } from './AddRecommendationModal';\nimport { EditRecommendationModal } from './EditRecommendationModal';\nimport { RatingModal } from './RatingModal';\nimport { LoadingState } from '../common/LoadingState';\nimport { useQuery } from 'react-query';\nimport * as api from '../../services/api';\nexport const RecommendationsList = () => {const [addModalOpen, setAddModalOpen] = useState(false);const [editModalOpen, setEditModalOpen] = useState(false);const [ratingModalOpen, setRatingModalOpen] = useState(false);const [selectedRec, setSelectedRec] = useState(null);const { data: recommendations, isLoading } = useQuery('recommendations', api.getRecommendations);const columns = [{field: 'title',headerName: 'Title',flex: 1},{field: 'type',headerName: 'Type',width: 130},{field: 'description',headerName: 'Description',flex: 1},{field: 'User.name',headerName: 'Recommended By',width: 150,valueGetter: (params) => params.row.User?.name},{field: 'actions',headerName: 'Actions',width: 200,renderCell: (params) => (<><Button onClick={() => {setSelectedRec(params.row);setRatingModalOpen(true);}}>Rate</Button><Button onClick={() => {setSelectedRec(params.row);setEditModalOpen(true);}}>Edit</Button></>)}];if (isLoading) return <LoadingState />;return (<Box sx={{ height: 400, width: '100%' }}><Button onClick={() => setAddModalOpen(true)} variant=\"contained\" sx={{ mb: 2 }}>Add Recommendation</Button><DataGrid rows={recommendations} columns={columns} pageSize={5}/><AddRecommendationModal open={addModalOpen} onClose={() => setAddModalOpen(false)}/>{selectedRec && (<><EditRecommendationModal open={editModalOpen} onClose={() => setEditModalOpen(false)} recommendation={selectedRec}/><RatingModal open={ratingModalOpen} onClose={() => setRatingModalOpen(false)} recommendation={selectedRec}/></>)}</Box>);};",
"frontend/src/components/recommendations/AddRecommendationModal.js":"import { Modal, Box } from '@mui/material';\nimport Form from '@rjsf/mui';\nimport validator from '@rjsf/validator-ajv8';\nimport { useMutation, useQueryClient } from 'react-query';\nimport * as api from '../../services/api';\nexport const AddRecommendationModal = ({ open, onClose }) => {const queryClient = useQueryClient();const { mutate } = useMutation(api.createRecommendation, {onSuccess: () => {queryClient.invalidateQueries('recommendations');onClose();}});const schema = {type: 'object',required: ['title', 'type'],properties: {title: {type: 'string',title: 'Title'},type: {type: 'string',title: 'Type',enum: ['movie', 'show']},description: {type: 'string',title: 'Description'}}};return (<Modal open={open} onClose={onClose}><Box sx={{position: 'absolute',top: '50%',left: '50%',transform: 'translate(-50%, -50%)',width: 400,bgcolor: 'background.paper',boxShadow: 24,p: 4}}><Form schema={schema} validator={validator} onSubmit={({ formData }) => mutate(formData)}/></Box></Modal>);};",
"frontend/src/components/recommendations/EditRecommendationModal.js":"import { Modal, Box } from '@mui/material';\nimport Form from '@rjsf/mui';\nimport validator from '@rjsf/validator-ajv8';\nimport { useMutation, useQueryClient } from 'react-query';\nimport * as api from '../../services/api';\nexport const EditRecommendationModal = ({ open, onClose, recommendation }) => {const queryClient = useQueryClient();const { mutate } = useMutation(api.createRecommendation, {onSuccess: () => {queryClient.invalidateQueries('recommendations');onClose();}});const schema = {type: 'object',required: ['title', 'type'],properties: {title: {type: 'string',title: 'Title'},type: {type: 'string',title: 'Type',enum: ['movie', 'show']},description: {type: 'string',title: 'Description'}}};return (<Modal open={open} onClose={onClose}><Box sx={{position: 'absolute',top: '50%',left: '50%',transform: 'translate(-50%, -50%)',width: 400,bgcolor: 'background.paper',boxShadow: 24,p: 4}}><Form schema={schema} validator={validator} formData={recommendation} onSubmit={({ formData }) => mutate(formData)}/></Box></Modal>);};",
"frontend/src/components/recommendations/RatingModal.js":"import { Modal, Box } from '@mui/material';\nimport Form from '@rjsf/mui';\nimport validator from '@rjsf/validator-ajv8';\nimport { useMutation, useQueryClient } from 'react-query';\nimport * as api from '../../services/api';\nexport const RatingModal = ({ open, onClose, recommendation }) => {const queryClient = useQueryClient();const { mutate } = useMutation(api.createRecommendation, {onSuccess: () => {queryClient.invalidateQueries('recommendations');onClose();}});const schema = {type: 'object',required: ['rating'],properties: {rating: {type: 'integer',title: 'Rating',minimum: 1,maximum: 5},review: {type: 'string',title: 'Review'}}};return (<Modal open={open} onClose={onClose}><Box sx={{position: 'absolute',top: '50%',left: '50%',transform: 'translate(-50%, -50%)',width: 400,bgcolor: 'background.paper',boxShadow: 24,p: 4}}><Form schema={schema} validator={validator} onSubmit={({ formData }) => mutate({ ...formData, recommendationId: recommendation.id })}/></Box></Modal>);};",
"frontend/src/components/friends/FriendsList.js":"import { DataGrid } from '@mui/x-data-grid';\nimport { Box, Button } from '@mui/material';\nimport { useState } from 'react';\nimport { AddFriendModal } from './AddFriendModal';\nimport { LoadingState } from '../common/LoadingState';\nimport { useQuery } from 'react-query';\nimport * as api from '../../services/api';\nexport const FriendsList = () => {const [addModalOpen, setAddModalOpen] = useState(false);const { data: friends, isLoading } = useQuery('friends', api.getFriends);const columns = [{field: 'name',headerName: 'Name',flex: 1},{field: 'email',headerName: 'Email',flex: 1}];if (isLoading) return <LoadingState />;return (<Box sx={{ height: 400, width: '100%' }}><Button onClick={() => setAddModalOpen(true)} variant=\"contained\" sx={{ mb: 2 }}>Add Friend</Button><DataGrid rows={friends} columns={columns} pageSize={5}/><AddFriendModal open={addModalOpen} onClose={() => setAddModalOpen(false)}/></Box>);};",
"frontend/src/components/friends/AddFriendModal.js":"import { Modal, Box } from '@mui/material';\nimport Form from '@rjsf/mui';\nimport validator from '@rjsf/validator-ajv8';\nimport { useMutation, useQueryClient } from 'react-query';\nimport * as api from '../../services/api';\nexport const AddFriendModal = ({ open, onClose }) => {const queryClient = useQueryClient();const { mutate } = useMutation(api.sendFriendRequest, {onSuccess: () => {queryClient.invalidateQueries('friends');onClose();}});const schema = {type: 'object',required: ['email'],properties: {email: {type: 'string',format: 'email',title: 'Friend\\'s Email'}}};return (<Modal open={open} onClose={onClose}><Box sx={{position: 'absolute',top: '50%',left: '50%',transform: 'translate(-50%, -50%)',width: 400,bgcolor: 'background.paper',boxShadow: 24,p: 4}}><Form schema={schema} validator={validator} onSubmit={({ formData }) => mutate(formData)}/></Box></Modal>);};",
"frontend/src/components/profile/ProfileForm.js":"import { Box } from '@mui/material';\nimport Form from '@rjsf/mui';\nimport validator from '@rjsf/validator-ajv8';\nimport { useMutation } from 'react-query';\nimport { useAuth } from '../../hooks/useAuth';\nimport * as api from '../../services/api';\nexport const ProfileForm = () => {const { user, login } = useAuth();const { mutate } = useMutation(api.updateProfile, {onSuccess: (data) => login(data)});const schema = {type: 'object',required: ['name', 'email'],properties: {name: {type: 'string',title: 'Name'},email: {type: 'string',format: 'email',title: 'Email'}}};return (<Box sx={{ maxWidth: 600, mx: 'auto', p: 2 }}><Form schema={schema} validator={validator} formData={user} onSubmit={({ formData }) => mutate(formData)}/></Box>);};",
"frontend/src/components/profile/UserStatsCard.js":"import { Card, CardContent, Typography } from '@mui/material';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\nexport const UserStatsCard = ({ stats }) => {return (<Card sx={{ m: 2 }}><CardContent><Typography variant=\"h6\" gutterBottom>Your Activity</Typography><BarChart width={500} height={300} data={stats}><CartesianGrid strokeDasharray=\"3 3\"/><XAxis dataKey=\"name\"/><YAxis/><Tooltip/><Bar dataKey=\"value\" fill=\"#8884d8\"/></BarChart></CardContent></Card>);};",
"frontend/src/components/admin/UserManagementGrid.js":"import { DataGrid } from '@mui/x-data-grid';\nimport { Box, Button } from '@mui/material';\nimport { useState } from 'react';\nimport { UserEditModal } from './UserEditModal';\nimport { LoadingState } from '../common/LoadingState';\nimport { useQuery } from 'react-query';\nimport * as api from '../../services/api';\nexport const UserManagementGrid = () => {const [editModalOpen, setEditModalOpen] = useState(false);const [selectedUser, setSelectedUser] = useState(null);const { data: users, isLoading } = useQuery('users', api.getUsers);const columns = [{field: 'name',headerName: 'Name',flex: 1},{field: 'email',headerName: 'Email',flex: 1},{field: 'isAdmin',headerName: 'Admin',width: 130,type: 'boolean'},{field: 'actions',headerName: 'Actions',width: 130,renderCell: (params) => (<Button onClick={() => {setSelectedUser(params.row);setEditModalOpen(true);}}>Edit</Button>)}];if (isLoading) return <LoadingState />;return (<Box sx={{ height: 400, width: '100%' }}><DataGrid rows={users} columns={columns} pageSize={5}/>{selectedUser && <UserEditModal open={editModalOpen} onClose={() => setEditModalOpen(false)} user={selectedUser}/>}</Box>);};",
"frontend/src/components/admin/UserEditModal.js":"import { Modal, Box } from '@mui/material';\nimport Form from '@rjsf/mui';\nimport validator from '@rjsf/validator-ajv8';\nimport { useMutation, useQueryClient } from 'react-query';\nimport * as api from '../../services/api';\nexport const UserEditModal = ({ open, onClose, user }) => {const queryClient = useQueryClient();const { mutate } = useMutation(api.updateUser, {onSuccess: () => {queryClient.invalidateQueries('users');onClose();}});const schema = {type: 'object',required: ['name', 'email'],properties: {name: {type: 'string',title: 'Name'},email: {type: 'string',format: 'email',title: 'Email'},isAdmin: {type: 'boolean',title: 'Admin Status'}}};return (<Modal open={open} onClose={onClose}><Box sx={{position: 'absolute',top: '50%',left: '50%',transform: 'translate(-50%, -50%)',width: 400,bgcolor: 'background.paper',boxShadow: 24,p: 4}}><Form schema={schema} validator={validator} formData={user} onSubmit={({ formData }) => mutate(formData)}/></Box></Modal>);};",
"frontend/src/components/admin/ContentModerationGrid.js":"import { DataGrid } from '@mui/x-data-grid';\nimport { Box, Button } from '@mui/material';\nimport { useState } from 'react';\nimport { ContentRemovalModal } from './ContentRemovalModal';\nimport { LoadingState } from '../common/LoadingState';\nimport { useQuery } from 'react-query';\nimport * as api from '../../services/api';\nexport const ContentModerationGrid = () => {const [removalModalOpen, setRemovalModalOpen] = useState(false);const [selectedContent, setSelectedContent] = useState(null);const { data: content, isLoading } = useQuery('content', api.getContent);const columns = [{field: 'title',headerName: 'Title',flex: 1},{field: 'type',headerName: 'Type',width: 130},{field: 'User.name',headerName: 'Posted By',width: 150,valueGetter: (params) => params.row.User?.name},{field: 'actions',headerName: 'Actions',width: 130,renderCell: (params) => (<Button color=\"error\" onClick={() => {setSelectedContent(params.row);setRemovalModalOpen(true);}}>Remove</Button>)}];if (isLoading) return <LoadingState />;return (<Box sx={{ height: 400, width: '100%' }}><DataGrid rows={content} columns={columns} pageSize={5}/>{selectedContent && <ContentRemovalModal open={removalModalOpen} onClose={() => setRemovalModalOpen(false)} content={selectedContent}/>}</Box>);};",
"frontend/src/components/admin/ContentRemovalModal.js":"import { Modal, Box } from '@mui/material';\nimport Form from '@rjsf/mui';\nimport validator from '@rjsf/validator-ajv8';\nimport { useMutation, useQueryClient } from 'react-query';\nimport * as api from '../../services/api';\nexport const ContentRemovalModal = ({ open, onClose, content }) => {const queryClient = useQueryClient();const { mutate } = useMutation(api.removeContent, {onSuccess: () => {queryClient.invalidateQueries('content');onClose();}});const schema = {type: 'object',required: ['reason'],properties: {reason: {type: 'string',title: 'Removal Reason'}}};return (<Modal open={open} onClose={onClose}><Box sx={{position: 'absolute',top: '50%',left: '50%',transform: 'translate(-50%, -50%)',width: 400,bgcolor: 'background.paper',boxShadow: 24,p: 4}}><Form schema={schema} validator={validator} onSubmit={({ formData }) => mutate({ id: content.id, ...formData })}/></Box></Modal>);};"
},
"commands":[
"cd frontend && npm install @mui/x-data-grid",
"cd frontend && npm install recharts"
]
}