{
"files":{
"frontend/src/services/api.js":"import axios from 'axios';const api = axios.create({baseURL: 'http://localhost:3000/api',headers: {'Content-Type': 'application/json'}});api.interceptors.request.use((config) => {const token = localStorage.getItem('token');if (token) {config.headers.Authorization = `Bearer ${token}`;}return config;});api.interceptors.response.use((response) => response.data,(error) => Promise.reject(error));export const login = (credentials) => api.post('/auth/login', credentials);export const register = (userData) => api.post('/auth/register', userData);export const getAllPlaces = () => api.get('/places');export const createPlace = (placeData) => api.post('/places', placeData);export const updatePlace = (id, placeData) => api.put(`/places/${id}`, placeData);export const createReview = (reviewData) => api.post('/reviews', reviewData);export const getReviews = () => api.get('/reviews');export const logConsumption = (consumptionData) => api.post('/consumption', consumptionData);export const getStats = () => api.get('/consumption/stats');",
"frontend/src/context/AuthContext.js":"import { createContext, useState, useContext, useEffect } from 'react';import { useNavigate } from 'react-router-dom';export const AuthContext = createContext(null);export const AuthProvider = ({ children }) => {const [user, setUser] = useState(null);const navigate = useNavigate();useEffect(() => {const storedUser = localStorage.getItem('user');if (storedUser) {setUser(JSON.parse(storedUser));}}, []);const login = (userData) => {setUser(userData);localStorage.setItem('user', JSON.stringify(userData));localStorage.setItem('token', userData.token);navigate('/dashboard');};const logout = () => {setUser(null);localStorage.removeItem('user');localStorage.removeItem('token');navigate('/login');};return (<AuthContext.Provider value={{ user, login, logout }}>{children}</AuthContext.Provider>);};export const useAuth = () => useContext(AuthContext);",
"frontend/src/hooks/useProtectedRoute.js":"import { useEffect } from 'react';import { useNavigate } from 'react-router-dom';import { useAuth } from '../context/AuthContext';export const useProtectedRoute = (requiredRole = null) => {const { user } = useAuth();const navigate = useNavigate();useEffect(() => {if (!user) {navigate('/login');return;}if (requiredRole && (!user.isAdmin || user.role !== requiredRole)) {navigate('/access-denied');}}, [user, navigate, requiredRole]);return user;};",
"frontend/src/components/auth/LoginForm.js":"import { useState } from 'react';import { Box, Button, Typography, Alert } from '@mui/material';import Form from '@rjsf/mui';import validator from '@rjsf/validator-ajv8';import { useAuth } from '../../context/AuthContext';import * as api from '../../services/api';const schema = {type: 'object',required: ['email', 'password'],properties: {email: {type: 'string',format: 'email',title: 'Email'},password: {type: 'string',title: 'Password',minLength: 6}}};export const LoginForm = () => {const { login } = useAuth();const [error, setError] = useState('');const handleSubmit = async ({ formData }) => {try {const response = await api.login(formData);login(response);} catch (err) {setError(err.response?.data?.message || 'Login failed');}};return (<Box sx={{ maxWidth: 400, mx: 'auto', p: 3 }}>{error && <Alert severity='error' sx={{ mb: 2 }}>{error}</Alert>}<Typography variant='h5' sx={{ mb: 3 }}>Login</Typography><Form schema={schema} validator={validator} onSubmit={handleSubmit}/></Box>);};",
"frontend/src/components/auth/SignupForm.js":"import { useState } from 'react';import { Box, Typography, Alert } from '@mui/material';import Form from '@rjsf/mui';import validator from '@rjsf/validator-ajv8';import { useAuth } from '../../context/AuthContext';import * as api from '../../services/api';const schema = {type: 'object',required: ['email', 'password', 'name'],properties: {name: {type: 'string',title: 'Name'},email: {type: 'string',format: 'email',title: 'Email'},password: {type: 'string',title: 'Password',minLength: 6}}};export const SignupForm = () => {const { login } = useAuth();const [error, setError] = useState('');const handleSubmit = async ({ formData }) => {try {const response = await api.register(formData);login(response);} catch (err) {setError(err.response?.data?.message || 'Registration failed');}};return (<Box sx={{ maxWidth: 400, mx: 'auto', p: 3 }}>{error && <Alert severity='error' sx={{ mb: 2 }}>{error}</Alert>}<Typography variant='h5' sx={{ mb: 3 }}>Sign Up</Typography><Form schema={schema} validator={validator} onSubmit={handleSubmit}/></Box>);};",
"frontend/src/components/layout/Header.js":"import { useState } from 'react';import { AppBar, Toolbar, Typography, Button, IconButton, Menu, MenuItem, Avatar } from '@mui/material';import { useNavigate } from 'react-router-dom';import { useAuth } from '../../context/AuthContext';export const Header = ({ title, menuItems = [] }) => {const { user, logout } = useAuth();const navigate = useNavigate();const [anchorEl, setAnchorEl] = useState(null);const handleMenuOpen = (event) => setAnchorEl(event.currentTarget);const handleMenuClose = () => setAnchorEl(null);const handleMenuClick = (path) => {navigate(path);handleMenuClose();};const handleLogout = () => {handleMenuClose();logout();};return (<AppBar position='static'><Toolbar><Typography variant='h6' component='div' sx={{ flexGrow: 1 }}>{title}</Typography>{menuItems.map((item) => (<Button key={item.path} color='inherit' onClick={() => handleMenuClick(item.path)}>{item.label}</Button>))}{user && (<><IconButton onClick={handleMenuOpen}><Avatar>{user.name[0]}</Avatar></IconButton><Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleMenuClose}><MenuItem onClick={() => handleMenuClick('/profile')}>Profile</MenuItem>{user.isAdmin && (<MenuItem onClick={() => handleMenuClick('/admin')}>Admin Panel</MenuItem>)}<MenuItem onClick={handleLogout}>Logout</MenuItem></Menu></>)}</Toolbar></AppBar>);};"
},
"commands":["npx create-react-app frontend --template typescript","cd frontend && npm install @mui/material @emotion/react @emotion/styled @mui/icons-material","cd frontend && npm install @mui/x-data-grid recharts","cd frontend && npm install axios react-router-dom @tanstack/react-query","cd frontend && npm install @rjsf/core @rjsf/utils @rjsf/validator-ajv8 @rjsf/mui"]
}