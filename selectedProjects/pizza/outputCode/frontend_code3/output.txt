{
"files":{
"frontend/src/theme.js":"import { createTheme } from '@mui/material';export const theme = createTheme({palette: {primary: {main: '#1976d2'},secondary: {main: '#dc004e'}},typography: {fontFamily: ['Roboto', 'sans-serif'].join(',')},components: {MuiButton: {styleOverrides: {root: {textTransform: 'none'}}}}});",
"frontend/src/pages/Dashboard.js":"import { Box, Grid } from '@mui/material';import { useQuery } from '@tanstack/react-query';import { Header } from '../components/layout/Header';import { MetricsCard } from '../components/metrics/MetricsCard';import { RecentActivityTable } from '../components/tables/RecentActivityTable';import { TopRatedPlacesTable } from '../components/tables/TopRatedPlacesTable';import { LoadingState } from '../components/shared/LoadingState';import { useProtectedRoute } from '../hooks/useProtectedRoute';import * as api from '../services/api';const menuItems = [{label: 'Places', path: '/places'},{label: 'Reviews', path: '/reviews'}];export const Dashboard = () => {useProtectedRoute();const { data: places, isLoading: placesLoading } = useQuery(['places'], api.getAllPlaces);const { data: reviews, isLoading: reviewsLoading } = useQuery(['reviews'], api.getReviews);const { data: stats, isLoading: statsLoading } = useQuery(['stats'], api.getStats);if (placesLoading || reviewsLoading || statsLoading) return <LoadingState />;return (<Box><Header title='Pizza Tracker' menuItems={menuItems} /><Box sx={{ p: 3 }}><Grid container spacing={3}><Grid item xs={12}><Grid container spacing={2}><Grid item xs={12} md={3}><MetricsCard title='Total Places' value={places?.length || 0} /></Grid><Grid item xs={12} md={3}><MetricsCard title='Total Reviews' value={reviews?.length || 0} /></Grid><Grid item xs={12} md={3}><MetricsCard title='Total Slices' value={stats?.reduce((acc, curr) => acc + curr.slices, 0) || 0} /></Grid><Grid item xs={12} md={3}><MetricsCard title='Average Rating' value={(reviews?.reduce((acc, curr) => acc + curr.rating, 0) / reviews?.length || 0).toFixed(1)} /></Grid></Grid></Grid><Grid item xs={12} md={6}><RecentActivityTable activities={reviews?.map(r => ({id: r.id,date: r.createdAt,type: 'Review',description: `${r.User.name} reviewed ${r.PizzaPlace.name}`}))} /></Grid><Grid item xs={12} md={6}><TopRatedPlacesTable places={places?.sort((a, b) => b.averageRating - a.averageRating).slice(0, 5)} /></Grid></Grid></Box></Box>);};",
"frontend/src/pages/Places.js":"import { useState } from 'react';import { Box, Button } from '@mui/material';import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';import { Header } from '../components/layout/Header';import { AddEditPlaceModal } from '../components/modals/AddEditPlaceModal';import { LoadingState } from '../components/shared/LoadingState';import { useProtectedRoute } from '../hooks/useProtectedRoute';import * as api from '../services/api';import { DataGrid } from '@mui/x-data-grid';const columns = [{field: 'name',headerName: 'Name',flex: 1},{field: 'address',headerName: 'Address',flex: 2},{field: 'phone',headerName: 'Phone',flex: 1},{field: 'averageRating',headerName: 'Rating',flex: 1,valueGetter: (params) => params.value.toFixed(1)}];export const Places = () => {useProtectedRoute();const [isModalOpen, setIsModalOpen] = useState(false);const queryClient = useQueryClient();const { data: places, isLoading } = useQuery(['places'], api.getAllPlaces);const createMutation = useMutation(api.createPlace, {onSuccess: () => {queryClient.invalidateQueries(['places']);setIsModalOpen(false);}});if (isLoading) return <LoadingState />;return (<Box><Header title='Pizza Places' menuItems={[]} /><Box sx={{ p: 3 }}><Button variant='contained' onClick={() => setIsModalOpen(true)} sx={{ mb: 2 }}>Add Place</Button><DataGrid autoHeight rows={places || []} columns={columns} pageSize={10} rowsPerPageOptions={[10]} disableSelectionOnClick /><AddEditPlaceModal open={isModalOpen} onClose={() => setIsModalOpen(false)} onSubmit={createMutation.mutate} /></Box></Box>);};",
"frontend/src/pages/Profile.js":"import { Box, Grid } from '@mui/material';import { useQuery } from '@tanstack/react-query';import { Header } from '../components/layout/Header';import { UserProfileForm } from '../components/forms/UserProfileForm';import { UserStatsCards } from '../components/stats/UserStatsCards';import { UserActivityTable } from '../components/tables/UserActivityTable';import { LoadingState } from '../components/shared/LoadingState';import { useProtectedRoute } from '../hooks/useProtectedRoute';import { useAuth } from '../context/AuthContext';import * as api from '../services/api';export const Profile = () => {const user = useProtectedRoute();const { data: stats, isLoading } = useQuery(['stats'], api.getStats);const { data: reviews } = useQuery(['reviews'], api.getReviews);if (isLoading) return <LoadingState />;const userStats = {totalSlices: stats?.reduce((acc, curr) => acc + curr.slices, 0) || 0,averageRating: reviews?.reduce((acc, curr) => acc + curr.rating, 0) / reviews?.length || 0,placesVisited: new Set(stats?.map(s => s.PizzaPlaceId)).size || 0};return (<Box><Header title='Profile' menuItems={[]} /><Box sx={{ p: 3 }}><Grid container spacing={3}><Grid item xs={12}><UserProfileForm userData={user} onSubmit={() => {}} /></Grid><Grid item xs={12}><UserStatsCards stats={userStats} /></Grid><Grid item xs={12}><UserActivityTable activities={reviews?.map(r => ({id: r.id,date: r.createdAt,activity: `Reviewed ${r.PizzaPlace.name}`,place: r.PizzaPlace.name})) || []} /></Grid></Grid></Box></Box>);};",
"frontend/src/pages/Admin.js":"import { Box } from '@mui/material';import { useQuery } from '@tanstack/react-query';import { Header } from '../components/layout/Header';import { UserManagementGrid } from '../components/admin/UserManagementGrid';import { SystemSettingsForm } from '../components/admin/SystemSettingsForm';import { LoadingState } from '../components/shared/LoadingState';import { useProtectedRoute } from '../hooks/useProtectedRoute';export const Admin = () => {useProtectedRoute('admin');const { data: users, isLoading } = useQuery(['users'], () => []);if (isLoading) return <LoadingState />;return (<Box><Header title='Admin Panel' menuItems={[]} /><Box sx={{ p: 3 }}><UserManagementGrid users={users || []} onUserSelect={() => {}} /><SystemSettingsForm settings={{}} onSubmit={() => {}} /></Box></Box>);};",
"frontend/src/pages/Auth.js":"import { useState } from 'react';import { Box, Tabs, Tab } from '@mui/material';import { LoginForm } from '../components/auth/LoginForm';import { SignupForm } from '../components/auth/SignupForm';export const Auth = () => {const [tab, setTab] = useState(0);return (<Box sx={{ mt: 8 }}><Box sx={{ borderBottom: 1, borderColor: 'divider', width: 400, mx: 'auto' }}><Tabs value={tab} onChange={(_, newValue) => setTab(newValue)}><Tab label='Login' /><Tab label='Sign Up' /></Tabs></Box>{tab === 0 ? <LoginForm /> : <SignupForm />}</Box>);};",
"frontend/src/pages/NotFound.js":"import { Box, Typography, Button } from '@mui/material';import { useNavigate } from 'react-router-dom';export const NotFound = () => {const navigate = useNavigate();return (<Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', minHeight: '100vh' }}><Typography variant='h1'>404</Typography><Typography variant='h5' sx={{ mb: 2 }}>Page Not Found</Typography><Button variant='contained' onClick={() => navigate('/')}>Go Home</Button></Box>);};",
"frontend/src/App.js":"import { Routes, Route, Navigate } from 'react-router-dom';import { useAuth } from './context/AuthContext';import { Dashboard } from './pages/Dashboard';import { Places } from './pages/Places';import { Profile } from './pages/Profile';import { Admin } from './pages/Admin';import { Auth } from './pages/Auth';import { NotFound } from './pages/NotFound';export const App = () => {const { user } = useAuth();return (<Routes><Route path='/' element={user ? <Navigate to='/dashboard' /> : <Navigate to='/login' />} /><Route path='/login' element={user ? <Navigate to='/dashboard' /> : <Auth />} /><Route path='/dashboard' element={<Dashboard />} /><Route path='/places' element={<Places />} /><Route path='/profile' element={<Profile />} /><Route path='/admin' element={<Admin />} /><Route path='*' element={<NotFound />} /></Routes>);};",
"frontend/src/index.js":"import { StrictMode } from 'react';import { createRoot } from 'react-dom/client';import { BrowserRouter } from 'react-router-dom';import { ThemeProvider } from '@mui/material';import { QueryClient, QueryClientProvider } from '@tanstack/react-query';import { AuthProvider } from './context/AuthContext';import { theme } from './theme';import { App } from './App';import './index.css';const queryClient = new QueryClient();const root = createRoot(document.getElementById('root'));root.render(<StrictMode><BrowserRouter><ThemeProvider theme={theme}><QueryClientProvider client={queryClient}><AuthProvider><App /></AuthProvider></QueryClientProvider></ThemeProvider></BrowserRouter></StrictMode>);",
"frontend/src/index.css":"body {margin: 0;font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;}"
},
"commands":["cd frontend && npm install @tanstack/react-query","cd frontend && npm install recharts","cd frontend && PORT=3001 npm start"]
}