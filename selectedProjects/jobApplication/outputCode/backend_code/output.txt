{
"files":{
"backend/.env":"PORT=3000\nDB_PATH=./database.sqlite\nJWT_SECRET=your-secret-key-here",
"backend/config/database.js":"const { Sequelize } = require('sequelize');\nconst path = require('path');\nconst dbPath = path.resolve(process.env.DB_PATH);\nconst sequelize = new Sequelize({ dialect: 'sqlite', storage: dbPath, logging: false });\nmodule.exports = sequelize;",
"backend/models/User.js":"const { DataTypes } = require('sequelize');\nconst sequelize = require('../config/database');\nconst User = sequelize.define('User', {\nid: { type: DataTypes.UUID, defaultValue: DataTypes.UUIDV4, primaryKey: true },\nemail: { type: DataTypes.STRING, unique: true, allowNull: false },\npassword: { type: DataTypes.STRING, allowNull: false },\nrole: { type: DataTypes.ENUM('admin', 'user'), defaultValue: 'user' },\nname: DataTypes.STRING\n});\nmodule.exports = User;",
"backend/models/Application.js":"const { DataTypes } = require('sequelize');\nconst sequelize = require('../config/database');\nconst Application = sequelize.define('Application', {\nid: { type: DataTypes.UUID, defaultValue: DataTypes.UUIDV4, primaryKey: true },\ncandidateName: { type: DataTypes.STRING, allowNull: false },\nposition: { type: DataTypes.STRING, allowNull: false },\nstatus: { type: DataTypes.ENUM('new', 'review', 'interview', 'offer', 'rejected'), defaultValue: 'new' },\nemail: DataTypes.STRING,\nphone: DataTypes.STRING,\nnotes: DataTypes.TEXT\n});\nmodule.exports = Application;",
"backend/models/index.js":"const sequelize = require('../config/database');\nconst User = require('./User');\nconst Application = require('./Application');\nApplication.belongsTo(User, { as: 'createdBy' });\nUser.hasMany(Application, { foreignKey: 'createdById' });\nmodule.exports = { sequelize, User, Application };",
"backend/controllers/authController.js":"const jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\nconst { User } = require('../models');\nexports.login = async (req, res) => {\ntry {\nconst { email, password } = req.body;\nconst user = await User.findOne({ where: { email } });\nif (!user || !bcrypt.compareSync(password, user.password)) {\nreturn res.status(401).json({ message: 'Invalid credentials' });\n}\nconst token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET);\nres.json({ token, user: { id: user.id, email: user.email, role: user.role, name: user.name } });\n} catch (error) {\nres.status(500).json({ message: error.message });\n}\n};",
"backend/controllers/applicationController.js":"const { Application, User } = require('../models');\nexports.create = async (req, res) => {\ntry {\nconst application = await Application.create({ ...req.body, createdById: req.user.id });\nres.status(201).json(application);\n} catch (error) {\nres.status(400).json({ message: error.message });\n}\n};\nexports.getAll = async (req, res) => {\ntry {\nconst applications = await Application.findAll({ include: [{ model: User, as: 'createdBy' }] });\nres.json(applications);\n} catch (error) {\nres.status(500).json({ message: error.message });\n}\n};\nexports.update = async (req, res) => {\ntry {\nconst application = await Application.findByPk(req.params.id);\nif (!application) return res.status(404).json({ message: 'Application not found' });\nawait application.update(req.body);\nres.json(application);\n} catch (error) {\nres.status(400).json({ message: error.message });\n}\n};\nexports.delete = async (req, res) => {\ntry {\nconst application = await Application.findByPk(req.params.id);\nif (!application) return res.status(404).json({ message: 'Application not found' });\nawait application.destroy();\nres.status(204).send();\n} catch (error) {\nres.status(500).json({ message: error.message });\n}\n};",
"backend/middleware/auth.js":"const jwt = require('jsonwebtoken');\nconst { User } = require('../models');\nexports.authenticate = async (req, res, next) => {\ntry {\nconst token = req.headers.authorization?.split(' ')[1];\nif (!token) return res.status(401).json({ message: 'No token provided' });\nconst decoded = jwt.verify(token, process.env.JWT_SECRET);\nreq.user = await User.findByPk(decoded.id);\nif (!req.user) return res.status(401).json({ message: 'User not found' });\nnext();\n} catch (error) {\nres.status(401).json({ message: 'Invalid token' });\n}\n};\nexports.isAdmin = (req, res, next) => {\nif (req.user.role !== 'admin') return res.status(403).json({ message: 'Admin access required' });\nnext();\n};",
"backend/routes/auth.js":"const express = require('express');\nconst router = express.Router();\nconst authController = require('../controllers/authController');\nrouter.post('/login', authController.login);\nmodule.exports = router;",
"backend/routes/applications.js":"const express = require('express');\nconst router = express.Router();\nconst applicationController = require('../controllers/applicationController');\nconst { authenticate } = require('../middleware/auth');\nrouter.use(authenticate);\nrouter.post('/', applicationController.create);\nrouter.get('/', applicationController.getAll);\nrouter.put('/:id', applicationController.update);\nrouter.delete('/:id', applicationController.delete);\nmodule.exports = router;",
"backend/seeders/index.js":"const bcrypt = require('bcryptjs');\nconst { User, Application } = require('../models');\nconst seedDatabase = async () => {\ntry {\nconst adminUser = await User.create({\nemail: 'user@example.com',\npassword: bcrypt.hashSync('test123', 10),\nrole: 'admin',\nname: 'Admin User'\n});\nawait Application.bulkCreate([\n{ candidateName: 'John Doe', position: 'Software Engineer', status: 'review', createdById: adminUser.id },\n{ candidateName: 'Jane Smith', position: 'Product Manager', status: 'interview', createdById: adminUser.id }\n]);\nconsole.log('Database seeded successfully');\n} catch (error) {\nconsole.error('Error seeding database:', error);\n}\n};\nmodule.exports = seedDatabase;",
"backend/server.js":"require('dotenv').config();\nconst express = require('express');\nconst cors = require('cors');\nconst { sequelize } = require('./models');\nconst seedDatabase = require('./seeders');\nconst app = express();\napp.use(cors());\napp.use(express.json());\napp.use('/api/auth', require('./routes/auth'));\napp.use('/api/applications', require('./routes/applications'));\nsequelize.sync({ force: true }).then(() => {\nseedDatabase();\napp.listen(process.env.PORT, () => console.log(`Server running on port ${process.env.PORT}`));\n});"
},
"commands":[
"mkdir backend",
"cd backend && npm init -y",
"cd backend && npm install express sequelize sqlite3 bcryptjs jsonwebtoken cors dotenv"
]
}