{
"files":{
"backend/.env":"PORT=3000\nDB_PATH=./database.sqlite\nJWT_SECRET=your-super-secret-jwt-key\nNODE_ENV=development",
"backend/config/database.js":"const { Sequelize } = require('sequelize');\nconst path = require('path');\nconst dbPath = path.resolve(__dirname, '../database.sqlite');\nconst sequelize = new Sequelize({dialect: 'sqlite',storage: dbPath,logging: false});\nmodule.exports = sequelize;",
"backend/models/User.js":"const { DataTypes } = require('sequelize');\nconst sequelize = require('../config/database');\nconst User = sequelize.define('User', {id: {type: DataTypes.INTEGER,primaryKey: true,autoIncrement: true},email: {type: DataTypes.STRING,unique: true,allowNull: false},password: {type: DataTypes.STRING,allowNull: false},name: {type: DataTypes.STRING,allowNull: false},role: {type: DataTypes.ENUM('admin', 'manager', 'employee'),allowNull: false}});\nmodule.exports = User;",
"backend/models/ReviewCycle.js":"const { DataTypes } = require('sequelize');\nconst sequelize = require('../config/database');\nconst ReviewCycle = sequelize.define('ReviewCycle', {id: {type: DataTypes.INTEGER,primaryKey: true,autoIncrement: true},name: {type: DataTypes.STRING,allowNull: false},startDate: {type: DataTypes.DATE,allowNull: false},endDate: {type: DataTypes.DATE,allowNull: false},status: {type: DataTypes.ENUM('active', 'completed', 'pending'),defaultValue: 'pending'}});\nmodule.exports = ReviewCycle;",
"backend/models/Review.js":"const { DataTypes } = require('sequelize');\nconst sequelize = require('../config/database');\nconst Review = sequelize.define('Review', {id: {type: DataTypes.INTEGER,primaryKey: true,autoIncrement: true},type: {type: DataTypes.ENUM('self', 'peer', 'manager'),allowNull: false},status: {type: DataTypes.ENUM('pending', 'completed'),defaultValue: 'pending'},feedback: {type: DataTypes.TEXT},rating: {type: DataTypes.INTEGER,validate: {min: 1,max: 5}}});\nmodule.exports = Review;",
"backend/models/index.js":"const sequelize = require('../config/database');\nconst User = require('./User');\nconst Review = require('./Review');\nconst ReviewCycle = require('./ReviewCycle');\nUser.hasMany(Review, { as: 'reviewsGiven', foreignKey: 'reviewerId' });\nUser.hasMany(Review, { as: 'reviewsReceived', foreignKey: 'employeeId' });\nReview.belongsTo(User, { as: 'reviewer', foreignKey: 'reviewerId' });\nReview.belongsTo(User, { as: 'employee', foreignKey: 'employeeId' });\nReview.belongsTo(ReviewCycle);\nReviewCycle.hasMany(Review);\nmodule.exports = {sequelize,User,Review,ReviewCycle};",
"backend/controllers/authController.js":"const jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\nconst { User } = require('../models');\nconst login = async (req, res) => {try {const { email, password } = req.body;\nconst user = await User.findOne({ where: { email } });\nif (!user || !bcrypt.compareSync(password, user.password)) {return res.status(401).json({ message: 'Invalid credentials' });}\nconst token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET);\nres.json({ token, user: { id: user.id, email: user.email, name: user.name, role: user.role } });} catch (error) {res.status(500).json({ message: 'Server error' })}};\nmodule.exports = { login };",
"backend/controllers/reviewController.js":"const { Review, User, ReviewCycle } = require('../models');\nconst createReview = async (req, res) => {try {const review = await Review.create({...req.body,reviewerId: req.user.id});\nres.status(201).json(review);} catch (error) {res.status(500).json({ message: 'Server error' })}};\nconst getReviews = async (req, res) => {try {const reviews = await Review.findAll({include: [{model: User,as: 'reviewer'},{model: User,as: 'employee'},{model: ReviewCycle}]});\nres.json(reviews);} catch (error) {res.status(500).json({ message: 'Server error' })}};\nmodule.exports = { createReview, getReviews };",
"backend/controllers/reviewCycleController.js":"const { ReviewCycle } = require('../models');\nconst createCycle = async (req, res) => {try {const cycle = await ReviewCycle.create(req.body);\nres.status(201).json(cycle);} catch (error) {res.status(500).json({ message: 'Server error' })}};\nconst getCycles = async (req, res) => {try {const cycles = await ReviewCycle.findAll();\nres.json(cycles);} catch (error) {res.status(500).json({ message: 'Server error' })}};\nmodule.exports = { createCycle, getCycles };",
"backend/middleware/auth.js":"const jwt = require('jsonwebtoken');\nconst auth = (req, res, next) => {try {const token = req.header('Authorization').replace('Bearer ', '');\nconst decoded = jwt.verify(token, process.env.JWT_SECRET);\nreq.user = decoded;\nnext();} catch (error) {res.status(401).json({ message: 'Authentication required' })}};\nconst adminOnly = (req, res, next) => {if (req.user.role !== 'admin') {return res.status(403).json({ message: 'Admin access required' })};\nnext()};\nmodule.exports = { auth, adminOnly };",
"backend/routes/auth.js":"const express = require('express');\nconst router = express.Router();\nconst { login } = require('../controllers/authController');\nrouter.post('/login', login);\nmodule.exports = router;",
"backend/routes/reviews.js":"const express = require('express');\nconst router = express.Router();\nconst { auth } = require('../middleware/auth');\nconst { createReview, getReviews } = require('../controllers/reviewController');\nrouter.post('/', auth, createReview);\nrouter.get('/', auth, getReviews);\nmodule.exports = router;",
"backend/routes/reviewCycles.js":"const express = require('express');\nconst router = express.Router();\nconst { auth, adminOnly } = require('../middleware/auth');\nconst { createCycle, getCycles } = require('../controllers/reviewCycleController');\nrouter.post('/', auth, adminOnly, createCycle);\nrouter.get('/', auth, getCycles);\nmodule.exports = router;",
"backend/seeders/seed.js":"const bcrypt = require('bcryptjs');\nconst { User, Review, ReviewCycle, sequelize } = require('../models');\nconst seed = async () => {try {await sequelize.sync({ force: true });\nconst admin = await User.create({email: 'user@example.com',password: bcrypt.hashSync('test123', 8),name: 'Admin User',role: 'admin'});\nconst cycle = await ReviewCycle.create({name: 'Q1 2024',startDate: new Date(),endDate: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000),status: 'active'});\nconsole.log('Database seeded!');} catch (error) {console.error('Seeding error:', error);}};\nmodule.exports = seed;",
"backend/server.js":"require('dotenv').config();\nconst express = require('express');\nconst cors = require('cors');\nconst app = express();\nconst seed = require('./seeders/seed');\nconst authRoutes = require('./routes/auth');\nconst reviewRoutes = require('./routes/reviews');\nconst reviewCycleRoutes = require('./routes/reviewCycles');\napp.use(cors());\napp.use(express.json());\napp.use('/api/auth', authRoutes);\napp.use('/api/reviews', reviewRoutes);\napp.use('/api/review-cycles', reviewCycleRoutes);\nseed();\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));"
},
"commands":["mkdir backend","cd backend && npm init -y","cd backend && npm install express sequelize sqlite3 bcryptjs jsonwebtoken cors dotenv"]
}