{
"files":{
"backend/.env":"PORT=3000\nDB_PATH=./data/database.sqlite\nJWT_SECRET=momotrack-secret-key123",
"backend/config/database.js":"const { Sequelize } = require('sequelize');const path = require('path');const sequelize = new Sequelize({dialect:'sqlite',storage:process.env.DB_PATH,logging:false});module.exports = sequelize;",
"backend/models/User.js":"const { DataTypes } = require('sequelize');const sequelize = require('../config/database');const User = sequelize.define('User',{id:{type:DataTypes.INTEGER,primaryKey:true,autoIncrement:true},name:{type:DataTypes.STRING,allowNull:false},email:{type:DataTypes.STRING,allowNull:false,unique:true},password:{type:DataTypes.STRING,allowNull:false},role:{type:DataTypes.ENUM('admin','user'),defaultValue:'user'}});module.exports = User;",
"backend/models/Inventory.js":"const { DataTypes } = require('sequelize');const sequelize = require('../config/database');const Inventory = sequelize.define('Inventory',{id:{type:DataTypes.INTEGER,primaryKey:true,autoIncrement:true},itemName:{type:DataTypes.STRING,allowNull:false},quantity:{type:DataTypes.INTEGER,allowNull:false},unitPrice:{type:DataTypes.DECIMAL(10,2),allowNull:false},reorderLevel:{type:DataTypes.INTEGER,allowNull:false}});module.exports = Inventory;",
"backend/models/MenuItem.js":"const { DataTypes } = require('sequelize');const sequelize = require('../config/database');const MenuItem = sequelize.define('MenuItem',{id:{type:DataTypes.INTEGER,primaryKey:true,autoIncrement:true},name:{type:DataTypes.STRING,allowNull:false},price:{type:DataTypes.DECIMAL(10,2),allowNull:false},description:{type:DataTypes.STRING},category:{type:DataTypes.STRING,allowNull:false}});module.exports = MenuItem;",
"backend/models/Sale.js":"const { DataTypes } = require('sequelize');const sequelize = require('../config/database');const Sale = sequelize.define('Sale',{id:{type:DataTypes.INTEGER,primaryKey:true,autoIncrement:true},total:{type:DataTypes.DECIMAL(10,2),allowNull:false},paymentMethod:{type:DataTypes.STRING,allowNull:false}});module.exports = Sale;",
"backend/models/SaleItem.js":"const { DataTypes } = require('sequelize');const sequelize = require('../config/database');const SaleItem = sequelize.define('SaleItem',{id:{type:DataTypes.INTEGER,primaryKey:true,autoIncrement:true},quantity:{type:DataTypes.INTEGER,allowNull:false},price:{type:DataTypes.DECIMAL(10,2),allowNull:false}});module.exports = SaleItem;",
"backend/models/index.js":"const sequelize = require('../config/database');const User = require('./User');const Inventory = require('./Inventory');const MenuItem = require('./MenuItem');const Sale = require('./Sale');const SaleItem = require('./SaleItem');Sale.belongsTo(User);SaleItem.belongsTo(Sale);SaleItem.belongsTo(MenuItem);module.exports = {sequelize,User,Inventory,MenuItem,Sale,SaleItem};",
"backend/controllers/authController.js":"const jwt = require('jsonwebtoken');const bcrypt = require('bcryptjs');const { User } = require('../models');const login = async (req,res) => {try{const {email,password} = req.body;const user = await User.findOne({where:{email}});if(!user||!bcrypt.compareSync(password,user.password))return res.status(401).json({message:'Invalid credentials'});const token = jwt.sign({id:user.id,role:user.role},process.env.JWT_SECRET,{expiresIn:'24h'});res.json({token,user:{id:user.id,name:user.name,email:user.email,role:user.role}})}catch(error){res.status(500).json({message:'Server error'})}};module.exports = {login};",
"backend/middleware/auth.js":"const jwt = require('jsonwebtoken');const auth = (req,res,next) => {try{const token = req.headers.authorization?.split(' ')[1];if(!token)return res.status(401).json({message:'No token provided'});const decoded = jwt.verify(token,process.env.JWT_SECRET);req.user = decoded;next()}catch(error){res.status(401).json({message:'Invalid token'})}};const isAdmin = (req,res,next) => {if(req.user.role !== 'admin')return res.status(403).json({message:'Admin access required'});next()};module.exports = {auth,isAdmin};",
"backend/routes/index.js":"const express = require('express');const router = express.Router();const authController = require('../controllers/authController');const {auth} = require('../middleware/auth');router.post('/login',authController.login);module.exports = router;",
"backend/utils/seeder.js":"const bcrypt = require('bcryptjs');const {User,Inventory,MenuItem,Sale,SaleItem} = require('../models');const seed = async () => {try{const adminUser = await User.create({name:'Test User',email:'user@example.com',password:bcrypt.hashSync('test123',10),role:'admin'});const inventory = await Inventory.create({itemName:'Flour',quantity:100,unitPrice:2.50,reorderLevel:20});const menuItem = await MenuItem.create({name:'Chicken Momo',price:8.99,description:'Steamed dumplings with chicken filling',category:'Non-veg'});const sale = await Sale.create({total:17.98,paymentMethod:'cash',UserId:adminUser.id});await SaleItem.create({quantity:2,price:8.99,SaleId:sale.id,MenuItemId:menuItem.id})}catch(error){console.error('Seeding error:',error)}};module.exports = seed;",
"backend/server.js":"require('dotenv').config();const express = require('express');const cors = require('cors');const {sequelize} = require('./models');const routes = require('./routes');const seed = require('./utils/seeder');const app = express();app.use(cors());app.use(express.json());app.use('/api',routes);const start = async () => {try{await sequelize.sync();const models = await sequelize.models;const tableCount = await Promise.all(Object.values(models).map(model => model.count()));if(tableCount.every(count => count === 0))await seed();app.listen(process.env.PORT,() => console.log(`Server running on port ${process.env.PORT}`))}catch(error){console.error('Server error:',error)}};start();"
},
"commands":["mkdir backend","cd backend && npm init -y","cd backend && npm install express sequelize sqlite3 bcryptjs jsonwebtoken cors dotenv"]
}