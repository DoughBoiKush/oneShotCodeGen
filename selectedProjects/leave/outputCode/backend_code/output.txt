{
"files":{
"backend/.env":"PORT=3000\nDB_PATH=./database.sqlite\nJWT_SECRET=your-secret-key-here\nNODE_ENV=development",
"backend/config/database.js":"const { Sequelize } = require('sequelize');\nconst path = require('path');\nconst sequelize = new Sequelize({dialect: 'sqlite',storage: process.env.DB_PATH,logging: false});\nmodule.exports = sequelize;",
"backend/models/User.js":"const { DataTypes } = require('sequelize');\nconst sequelize = require('../config/database');\nconst User = sequelize.define('User', {id: {type: DataTypes.INTEGER,primaryKey: true,autoIncrement: true},email: {type: DataTypes.STRING,unique: true,allowNull: false},password: {type: DataTypes.STRING,allowNull: false},name: {type: DataTypes.STRING,allowNull: false},role: {type: DataTypes.ENUM('admin', 'manager', 'hr', 'employee'),defaultValue: 'employee'}});\nmodule.exports = User;",
"backend/models/LeaveRequest.js":"const { DataTypes } = require('sequelize');\nconst sequelize = require('../config/database');\nconst LeaveRequest = sequelize.define('LeaveRequest', {id: {type: DataTypes.INTEGER,primaryKey: true,autoIncrement: true},startDate: {type: DataTypes.DATE,allowNull: false},endDate: {type: DataTypes.DATE,allowNull: false},type: {type: DataTypes.ENUM('annual', 'sick', 'personal'),allowNull: false},status: {type: DataTypes.ENUM('pending', 'approved', 'rejected'),defaultValue: 'pending'},reason: DataTypes.TEXT});\nmodule.exports = LeaveRequest;",
"backend/models/LeaveBalance.js":"const { DataTypes } = require('sequelize');\nconst sequelize = require('../config/database');\nconst LeaveBalance = sequelize.define('LeaveBalance', {id: {type: DataTypes.INTEGER,primaryKey: true,autoIncrement: true},annual: {type: DataTypes.INTEGER,defaultValue: 20},sick: {type: DataTypes.INTEGER,defaultValue: 10},personal: {type: DataTypes.INTEGER,defaultValue: 5}});\nmodule.exports = LeaveBalance;",
"backend/models/index.js":"const sequelize = require('../config/database');\nconst User = require('./User');\nconst LeaveRequest = require('./LeaveRequest');\nconst LeaveBalance = require('./LeaveBalance');\nUser.hasMany(LeaveRequest);\nLeaveRequest.belongsTo(User);\nUser.hasOne(LeaveBalance);\nLeaveBalance.belongsTo(User);\nmodule.exports = {sequelize,User,LeaveRequest,LeaveBalance};",
"backend/controllers/authController.js":"const jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\nconst { User } = require('../models');\nexports.login = async (req, res) => {try {const { email, password } = req.body;const user = await User.findOne({ where: { email } });if (!user || !bcrypt.compareSync(password, user.password)) return res.status(401).json({ message: 'Invalid credentials' });const token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET);res.json({ token, user: { id: user.id, email: user.email, role: user.role, name: user.name } });} catch (error) {res.status(500).json({ message: error.message });}};",
"backend/controllers/leaveController.js":"const { LeaveRequest, User, LeaveBalance } = require('../models');\nexports.createLeaveRequest = async (req, res) => {try {const leave = await LeaveRequest.create({ ...req.body, UserId: req.user.id });res.status(201).json(leave);} catch (error) {res.status(500).json({ message: error.message })}};\nexports.getLeaveRequests = async (req, res) => {try {const where = req.user.role === 'employee' ? { UserId: req.user.id } : {};const leaves = await LeaveRequest.findAll({ where, include: [{ model: User, attributes: ['name', 'email'] }] });res.json(leaves);} catch (error) {res.status(500).json({ message: error.message })}};\nexports.updateLeaveStatus = async (req, res) => {try {const { id, status } = req.body;const leave = await LeaveRequest.findByPk(id);if (!leave) return res.status(404).json({ message: 'Leave request not found' });leave.status = status;await leave.save();res.json(leave);} catch (error) {res.status(500).json({ message: error.message })}};",
"backend/controllers/userController.js":"const { User, LeaveBalance } = require('../models');\nconst bcrypt = require('bcryptjs');\nexports.createUser = async (req, res) => {try {const hashedPassword = bcrypt.hashSync(req.body.password, 8);const user = await User.create({ ...req.body, password: hashedPassword });await LeaveBalance.create({ UserId: user.id });res.status(201).json(user);} catch (error) {res.status(500).json({ message: error.message })}};\nexports.getUsers = async (req, res) => {try {const users = await User.findAll({ include: [LeaveBalance] });res.json(users);} catch (error) {res.status(500).json({ message: error.message })}};",
"backend/middleware/auth.js":"const jwt = require('jsonwebtoken');\nconst authMiddleware = (req, res, next) => {try {const token = req.headers.authorization?.split(' ')[1];if (!token) return res.status(401).json({ message: 'No token provided' });const decoded = jwt.verify(token, process.env.JWT_SECRET);req.user = decoded;next();} catch (error) {res.status(401).json({ message: 'Invalid token' })}};\nmodule.exports = authMiddleware;",
"backend/routes/auth.js":"const router = require('express').Router();\nconst authController = require('../controllers/authController');\nrouter.post('/login', authController.login);\nmodule.exports = router;",
"backend/routes/leaves.js":"const router = require('express').Router();\nconst leaveController = require('../controllers/leaveController');\nconst auth = require('../middleware/auth');\nrouter.use(auth);\nrouter.post('/', leaveController.createLeaveRequest);\nrouter.get('/', leaveController.getLeaveRequests);\nrouter.put('/:id/status', leaveController.updateLeaveStatus);\nmodule.exports = router;",
"backend/routes/users.js":"const router = require('express').Router();\nconst userController = require('../controllers/userController');\nconst auth = require('../middleware/auth');\nrouter.use(auth);\nrouter.post('/', userController.createUser);\nrouter.get('/', userController.getUsers);\nmodule.exports = router;",
"backend/seeders/index.js":"const bcrypt = require('bcryptjs');\nconst { User, LeaveBalance, LeaveRequest } = require('../models');\nasync function seed() {try {const adminUser = await User.create({email: 'user@example.com',password: bcrypt.hashSync('test123', 8),name: 'Admin User',role: 'admin'});await LeaveBalance.create({ UserId: adminUser.id });const employee = await User.create({email: 'employee@example.com',password: bcrypt.hashSync('test123', 8),name: 'Test Employee',role: 'employee'});await LeaveBalance.create({ UserId: employee.id });await LeaveRequest.create({startDate: new Date(),endDate: new Date(Date.now() + 86400000),type: 'annual',reason: 'Vacation',UserId: employee.id});} catch (error) {console.error('Seeding error:', error)}};\nmodule.exports = seed;",
"backend/server.js":"require('dotenv').config();\nconst express = require('express');\nconst cors = require('cors');\nconst { sequelize } = require('./models');\nconst seed = require('./seeders');\nconst app = express();\napp.use(cors());\napp.use(express.json());\napp.use('/api/auth', require('./routes/auth'));\napp.use('/api/leaves', require('./routes/leaves'));\napp.use('/api/users', require('./routes/users'));\nsequelize.sync().then(async () => {const tables = await sequelize.showAllSchemas();if (tables.length === 0) {await seed();}app.listen(process.env.PORT, () => console.log(`Server running on port ${process.env.PORT}`));});"
},
"commands":["mkdir backend","cd backend && npm init -y","cd backend && npm install express sequelize sqlite3 bcryptjs jsonwebtoken cors dotenv"]
}