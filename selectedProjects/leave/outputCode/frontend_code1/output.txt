{
"files":{
"frontend/src/services/api.js":"import axios from 'axios';const api = axios.create({baseURL: 'http://localhost:3000/api',headers: {'Content-Type': 'application/json'}});api.interceptors.request.use((config) => {const token = localStorage.getItem('token');if (token) {config.headers.Authorization = `Bearer ${token}`;}return config;});api.interceptors.response.use((response) => response.data,(error) => Promise.reject(error));export const login = (data) => api.post('/auth/login', data);export const createUser = (data) => api.post('/users', data);export const getUsers = () => api.get('/users');export const createLeaveRequest = (data) => api.post('/leaves', data);export const getLeaveRequests = () => api.get('/leaves');export const updateLeaveStatus = (id, status) => api.put(`/leaves/${id}/status`, { status });",
"frontend/src/context/AuthContext.js":"import { createContext, useState, useContext, useEffect } from 'react';import { useNavigate } from 'react-router-dom';const AuthContext = createContext(null);export const AuthProvider = ({ children }) => {const [user, setUser] = useState(null);const navigate = useNavigate();useEffect(() => {const storedUser = localStorage.getItem('user');if (storedUser) {setUser(JSON.parse(storedUser));}}, []);const login = (userData) => {setUser(userData);localStorage.setItem('user', JSON.stringify(userData));localStorage.setItem('token', userData.token);navigate('/dashboard');};const logout = () => {setUser(null);localStorage.removeItem('user');localStorage.removeItem('token');navigate('/login');};return <AuthContext.Provider value={{ user, login, logout }}>{children}</AuthContext.Provider>;};export const useAuth = () => {const context = useContext(AuthContext);if (!context) throw new Error('useAuth must be used within AuthProvider');return context;};",
"frontend/src/hooks/useLeaveRequests.js":"import { useQuery, useMutation, useQueryClient } from 'react-query';import { getLeaveRequests, createLeaveRequest, updateLeaveStatus } from '../services/api';export const useLeaveRequests = () => {const { data: leaves = [], isLoading, error } = useQuery('leaves', getLeaveRequests);const queryClient = useQueryClient();const createMutation = useMutation(createLeaveRequest, {onSuccess: () => queryClient.invalidateQueries('leaves')});const updateMutation = useMutation(({id, status}) => updateLeaveStatus(id, status), {onSuccess: () => queryClient.invalidateQueries('leaves')});return { leaves, isLoading, error, createLeave: createMutation.mutate, updateLeaveStatus: updateMutation.mutate };};",
"frontend/src/components/auth/Login.js":"import { useState } from 'react';import { Box, Card, CardContent, TextField, Button, Typography } from '@mui/material';import { login } from '../../services/api';import { useAuth } from '../../context/AuthContext';export const Login = () => {const { login: authLogin } = useAuth();const [formData, setFormData] = useState({ email: '', password: '' });const handleSubmit = async (e) => {e.preventDefault();try {const response = await login(formData);authLogin(response);} catch (error) {console.error('Login failed:', error);}};return (<Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '100vh' }}><Card sx={{ minWidth: 300, boxShadow: 3 }}><CardContent><Typography variant='h5' sx={{ mb: 2 }}>Login</Typography><form onSubmit={handleSubmit}><TextField fullWidth label='Email' type='email' value={formData.email} onChange={(e) => setFormData({ ...formData, email: e.target.value })} margin='normal'/><TextField fullWidth label='Password' type='password' value={formData.password} onChange={(e) => setFormData({ ...formData, password: e.target.value })} margin='normal'/><Button fullWidth variant='contained' type='submit' sx={{ mt: 2 }}>Login</Button></form></CardContent></Card></Box>);};",
"frontend/src/components/auth/Signup.js":"import { useState } from 'react';import { Box, Card, CardContent, TextField, Button, Typography, MenuItem } from '@mui/material';import { createUser } from '../../services/api';import { useNavigate } from 'react-router-dom';export const Signup = () => {const navigate = useNavigate();const [formData, setFormData] = useState({ email: '', password: '', name: '', role: 'employee' });const handleSubmit = async (e) => {e.preventDefault();try {await createUser(formData);navigate('/login');} catch (error) {console.error('Signup failed:', error);}};return (<Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '100vh' }}><Card sx={{ minWidth: 300, boxShadow: 3 }}><CardContent><Typography variant='h5' sx={{ mb: 2 }}>Sign Up</Typography><form onSubmit={handleSubmit}><TextField fullWidth label='Name' value={formData.name} onChange={(e) => setFormData({ ...formData, name: e.target.value })} margin='normal'/><TextField fullWidth label='Email' type='email' value={formData.email} onChange={(e) => setFormData({ ...formData, email: e.target.value })} margin='normal'/><TextField fullWidth label='Password' type='password' value={formData.password} onChange={(e) => setFormData({ ...formData, password: e.target.value })} margin='normal'/><TextField select fullWidth label='Role' value={formData.role} onChange={(e) => setFormData({ ...formData, role: e.target.value })} margin='normal'><MenuItem value='employee'>Employee</MenuItem><MenuItem value='manager'>Manager</MenuItem><MenuItem value='hr'>HR</MenuItem><MenuItem value='admin'>Admin</MenuItem></TextField><Button fullWidth variant='contained' type='submit' sx={{ mt: 2 }}>Sign Up</Button></form></CardContent></Card></Box>);};",
"frontend/src/components/common/Header.js":"import { AppBar, Toolbar, Typography, Button, IconButton, Menu, MenuItem, Avatar } from '@mui/material';import { useState } from 'react';import { useNavigate } from 'react-router-dom';import { useAuth } from '../../context/AuthContext';export const Header = ({ links = [] }) => {const { user, logout } = useAuth();const navigate = useNavigate();const [anchorEl, setAnchorEl] = useState(null);const handleMenu = (event) => setAnchorEl(event.currentTarget);const handleClose = () => setAnchorEl(null);const handleLogout = () => {handleClose();logout();};return (<AppBar position='static'><Toolbar><Typography variant='h6' sx={{ flexGrow: 1 }}>LeaveFlow</Typography>{links.map((link) => (<Button key={link.path} color='inherit' onClick={() => navigate(link.path)}>{link.label}</Button>))}{user && (<><IconButton onClick={handleMenu}><Avatar>{user.name[0]}</Avatar></IconButton><Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleClose}><MenuItem onClick={() => {handleClose();navigate('/profile');}}>Profile</MenuItem><MenuItem onClick={handleLogout}>Logout</MenuItem></Menu></>)}</Toolbar></AppBar>);};"
},
"commands":["npx create-react-app frontend --template typescript","cd frontend && npm install @mui/material @emotion/react @emotion/styled @mui/icons-material @mui/x-data-grid","cd frontend && npm install react-router-dom axios react-query @rjsf/core @rjsf/utils @rjsf/validator-ajv8 @rjsf/mui recharts"]
}